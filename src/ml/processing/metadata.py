"""
Metadata - Fun√ß√µes para registrar metadata de processamento
Salva estat√≠sticas de cada step no PostgreSQL sem duplicar dados
"""

import json
from datetime import datetime
from typing import Dict, Any, Optional
from sqlalchemy import Engine, text


def save_pipeline_metadata(
    engine: Engine,
    step_number: int,
    step_name: str,
    rows_processed: int,
    rows_output: int,
    data_modified: bool,
    metadata: Dict[str, Any],
    duration_seconds: float = None,
    status: str = 'success'
) -> None:
    """
    Salva metadata de um step do pipeline
    
    Args:
        engine: SQLAlchemy engine
        step_number: N√∫mero do step (1-6)
        step_name: Nome do step (ex: 'outlier_analysis')
        rows_processed: N√∫mero de linhas processadas
        rows_output: N√∫mero de linhas na sa√≠da
        data_modified: Se dados foram alterados (True) ou apenas analisados (False)
        metadata: Dicion√°rio com estat√≠sticas do step
        duration_seconds: Dura√ß√£o da execu√ß√£o em segundos
        status: Status do step ('success', 'failed', 'skipped')
    """
    metadata_json = json.dumps(metadata)
    
    query = text("""
        INSERT INTO pipeline_metadata (
            step_number, 
            step_name, 
            rows_processed, 
            rows_output, 
            data_modified,
            metadata,
            duration_seconds,
            status
        ) VALUES (
            :step_number,
            :step_name,
            :rows_processed,
            :rows_output,
            :data_modified,
            CAST(:metadata AS jsonb),
            :duration_seconds,
            :status
        )
    """)
    
    with engine.begin() as conn:
        conn.execute(query, {
            'step_number': step_number,
            'step_name': step_name,
            'rows_processed': rows_processed,
            'rows_output': rows_output,
            'data_modified': data_modified,
            'metadata': metadata_json,
            'duration_seconds': duration_seconds,
            'status': status
        })
    
    print(f"üìä Metadata salvo: Step {step_number} ({step_name})")


def get_last_pipeline_execution(engine: Engine) -> Dict[str, Any]:
    """
    Retorna informa√ß√µes da √∫ltima execu√ß√£o do pipeline
    
    Returns:
        Dicion√°rio com estat√≠sticas da √∫ltima execu√ß√£o
    """
    query = text("""
        SELECT 
            step_number,
            step_name,
            timestamp,
            rows_processed,
            rows_output,
            data_modified,
            metadata,
            duration_seconds,
            status
        FROM pipeline_metadata
        ORDER BY timestamp DESC
        LIMIT 6
    """)
    
    with engine.connect() as conn:
        result = conn.execute(query)
        rows = result.fetchall()
        
        if not rows:
            return {}
        
        return {
            'steps': [
                {
                    'step_number': row[0],
                    'step_name': row[1],
                    'timestamp': row[2],
                    'rows_processed': row[3],
                    'rows_output': row[4],
                    'data_modified': row[5],
                    'metadata': row[6],
                    'duration_seconds': row[7],
                    'status': row[8]
                }
                for row in rows
            ]
        }


def get_latest_data_table(engine: Engine, target_step: int) -> str:
    """
    Identifica qual tabela cont√©m os dados mais recentes para um step
    
    L√≥gica:
    - Busca no pipeline_metadata qual foi o √∫ltimo step que MODIFICOU dados
    - Se step anterior n√£o modificou dados, busca o anterior recursivamente
    - Retorna nome da tabela com dados v√°lidos
    
    Args:
        engine: SQLAlchemy engine
        target_step: Step que vai processar (ex: 4 = normalize)
        
    Returns:
        Nome da tabela com dados mais recentes (ex: 'raw_transactions', 'normalized_transactions')
    """
    # Mapeamento step ‚Üí tabela de output
    step_to_table = {
        1: 'raw_transactions',
        2: 'cleaned_transactions',  # N√£o usada (step 02 n√£o modifica)
        3: 'imputed_transactions',  # N√£o usada (step 03 n√£o modifica)
        4: 'normalized_transactions',
        5: 'engineered_transactions',
        6: 'train_test_split'  # Caso especial
    }
    
    # Buscar √∫ltimo step que MODIFICOU dados antes do target_step
    query = text("""
        SELECT step_number, step_name, data_modified
        FROM pipeline_metadata
        WHERE step_number < :target_step 
          AND status = 'success'
        ORDER BY timestamp DESC
        LIMIT 10
    """)
    
    with engine.connect() as conn:
        result = conn.execute(query, {'target_step': target_step})
        rows = result.fetchall()
        
        if not rows:
            # Nenhum step executado antes, usar raw
            return 'raw_transactions'
        
        # Procurar √∫ltimo step que MODIFICOU dados
        for row in rows:
            step_num = row[0]
            data_modified = row[2]
            
            if data_modified:
                # Este step modificou dados, usar sua tabela de output
                return step_to_table.get(step_num, 'raw_transactions')
        
        # Nenhum step modificou dados ainda, usar raw
        return 'raw_transactions'


def check_table_exists(engine: Engine, table_name: str) -> bool:
    """
    Verifica se tabela existe no PostgreSQL
    
    Args:
        engine: SQLAlchemy engine
        table_name: Nome da tabela
        
    Returns:
        True se existe, False caso contr√°rio
    """
    query = text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = :table_name
        )
    """)
    
    with engine.connect() as conn:
        result = conn.execute(query, {'table_name': table_name})
        return result.scalar()
